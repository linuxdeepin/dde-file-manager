/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p diskmount_interface.h:diskmount_interface.cpp -c DiskMountInterface diskmount.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DISKMOUNT_INTERFACE_H_1462956635
#define DISKMOUNT_INTERFACE_H_1462956635

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "dbustype.h"

/*
 * Proxy class for interface com.deepin.daemon.DiskMount
 */
class DiskMountInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:

    static inline const char *staticServerPath()
    { return "com.deepin.daemon.DiskMount"; }
    static inline const char *staticInterfacePath()
    { return "/com/deepin/daemon/DiskMount"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.DiskMount"; }

public:
    DiskMountInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~DiskMountInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Eject(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Eject"), argumentList);
    }

    inline QDBusPendingReply<DiskInfoList> ListDisk()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListDisk"), argumentList);
    }

    inline QDBusPendingReply<> Mount(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Mount"), argumentList);
    }

    inline QDBusPendingReply<DiskInfo> QueryDisk(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("QueryDisk"), argumentList);
    }

    inline QDBusPendingReply<> Unmount(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Unmount"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Changed(int in0, const QString &in1);
    void Error(const QString &in0, const QString &in1);
};

#endif
