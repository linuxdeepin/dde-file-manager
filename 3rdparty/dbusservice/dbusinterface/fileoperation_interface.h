/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i dbusservice/dbustype/dbusinforet.h -c FileOperationInterface -p dbusinterface/fileoperation_interface fileoperation.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FILEOPERATION_INTERFACE_H
#define FILEOPERATION_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbusservice/dbustype/dbusinforet.h"

/*
 * Proxy class for interface com.deepin.filemanager.daemon.Operations
 */
class FileOperationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.daemon.Operations"; }

public:
    FileOperationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~FileOperationInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<DBusInfoRet> NewCopyJob(const QStringList &filelist, const QString &targetDir)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filelist) << QVariant::fromValue(targetDir);
        return asyncCallWithArgumentList(QStringLiteral("NewCopyJob"), argumentList);
    }

    inline QDBusPendingReply<DBusInfoRet> NewCreateFolderJob(const QString &fabspath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fabspath);
        return asyncCallWithArgumentList(QStringLiteral("NewCreateFolderJob"), argumentList);
    }

    inline QDBusPendingReply<DBusInfoRet> NewCreateTemplateFileJob(const QString &templateFile, const QString &targetDir)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(templateFile) << QVariant::fromValue(targetDir);
        return asyncCallWithArgumentList(QStringLiteral("NewCreateTemplateFileJob"), argumentList);
    }

    inline QDBusPendingReply<DBusInfoRet> NewDeleteJob(const QStringList &filelist)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filelist);
        return asyncCallWithArgumentList(QStringLiteral("NewDeleteJob"), argumentList);
    }

    inline QDBusPendingReply<DBusInfoRet> NewMoveJob(const QStringList &filelist, const QString &targetDir)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filelist) << QVariant::fromValue(targetDir);
        return asyncCallWithArgumentList(QStringLiteral("NewMoveJob"), argumentList);
    }

    inline QDBusPendingReply<DBusInfoRet> NewRenameJob(const QString &oldFile, const QString &newFile)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(oldFile) << QVariant::fromValue(newFile);
        return asyncCallWithArgumentList(QStringLiteral("NewRenameJob"), argumentList);
    }

    inline QDBusPendingReply<QString, QDBusObjectPath, bool> test(const QString &oldFile, const QString &newFile)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(oldFile) << QVariant::fromValue(newFile);
        return asyncCallWithArgumentList(QStringLiteral("test"), argumentList);
    }
    inline QDBusReply<QString> test(const QString &oldFile, const QString &newFile, QDBusObjectPath &result2, bool &result3)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(oldFile) << QVariant::fromValue(newFile);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("test"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            result2 = qdbus_cast<QDBusObjectPath>(reply.arguments().at(1));
            result3 = qdbus_cast<bool>(reply.arguments().at(2));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace daemon {
        typedef ::FileOperationInterface Operations;
      }
    }
  }
}
#endif
