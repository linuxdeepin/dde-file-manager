/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i controllers/fileoperation.h -i dbusservice/dbustype/dbusinforet.h -c FileOperationAdaptor -l FileOperation -a dbusadaptor/fileoperation_adaptor fileoperation.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbusadaptor/fileoperation_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FileOperationAdaptor
 */

FileOperationAdaptor::FileOperationAdaptor(FileOperation *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

FileOperationAdaptor::~FileOperationAdaptor()
{
    // destructor
}

DBusInfoRet FileOperationAdaptor::NewCopyJob(const QStringList &filelist, const QString &targetDir)
{
    // handle method call com.deepin.filemanager.daemon.Operations.NewCopyJob
    return parent()->NewCopyJob(filelist, targetDir);
}

DBusInfoRet FileOperationAdaptor::NewCreateFolderJob(const QString &fabspath)
{
    // handle method call com.deepin.filemanager.daemon.Operations.NewCreateFolderJob
    return parent()->NewCreateFolderJob(fabspath);
}

DBusInfoRet FileOperationAdaptor::NewCreateTemplateFileJob(const QString &templateFile, const QString &targetDir)
{
    // handle method call com.deepin.filemanager.daemon.Operations.NewCreateTemplateFileJob
    return parent()->NewCreateTemplateFileJob(templateFile, targetDir);
}

DBusInfoRet FileOperationAdaptor::NewDeleteJob(const QStringList &filelist)
{
    // handle method call com.deepin.filemanager.daemon.Operations.NewDeleteJob
    return parent()->NewDeleteJob(filelist);
}

DBusInfoRet FileOperationAdaptor::NewMoveJob(const QStringList &filelist, const QString &targetDir)
{
    // handle method call com.deepin.filemanager.daemon.Operations.NewMoveJob
    return parent()->NewMoveJob(filelist, targetDir);
}

DBusInfoRet FileOperationAdaptor::NewRenameJob(const QString &oldFile, const QString &newFile)
{
    // handle method call com.deepin.filemanager.daemon.Operations.NewRenameJob
    return parent()->NewRenameJob(oldFile, newFile);
}

QString FileOperationAdaptor::test(const QString &oldFile, const QString &newFile, QDBusObjectPath &result2, bool &result3)
{
    // handle method call com.deepin.filemanager.daemon.Operations.test
    return parent()->test(oldFile, newFile, result2, result3);
}

