/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p screensaver_interface.h: /home/lee/wk/V20/github/dde-file-manager/src/dde-wallpaper-chooser/dbus/com.deepin.ScreenSaver.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SCREENSAVER_INTERFACE_H
#define SCREENSAVER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.ScreenSaver
 */
class ComDeepinScreenSaverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.ScreenSaver"; }

public:
    ComDeepinScreenSaverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComDeepinScreenSaverInterface();

    Q_PROPERTY(QStringList allScreenSaver READ allScreenSaver)
    inline QStringList allScreenSaver() const
    { return qvariant_cast< QStringList >(property("allScreenSaver")); }

    Q_PROPERTY(int batteryScreenSaverTimeout READ batteryScreenSaverTimeout WRITE setBatteryScreenSaverTimeout)
    inline int batteryScreenSaverTimeout() const
    { return qvariant_cast< int >(property("batteryScreenSaverTimeout")); }
    inline void setBatteryScreenSaverTimeout(int value)
    { setProperty("batteryScreenSaverTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(QString currentScreenSaver READ currentScreenSaver WRITE setCurrentScreenSaver)
    inline QString currentScreenSaver() const
    { return qvariant_cast< QString >(property("currentScreenSaver")); }
    inline void setCurrentScreenSaver(const QString &value)
    { setProperty("currentScreenSaver", QVariant::fromValue(value)); }

    Q_PROPERTY(bool isRunning READ isRunning)
    inline bool isRunning() const
    { return qvariant_cast< bool >(property("isRunning")); }

    Q_PROPERTY(int linePowerScreenSaverTimeout READ linePowerScreenSaverTimeout WRITE setLinePowerScreenSaverTimeout)
    inline int linePowerScreenSaverTimeout() const
    { return qvariant_cast< int >(property("linePowerScreenSaverTimeout")); }
    inline void setLinePowerScreenSaverTimeout(int value)
    { setProperty("linePowerScreenSaverTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(bool lockScreenAtAwake READ lockScreenAtAwake WRITE setLockScreenAtAwake)
    inline bool lockScreenAtAwake() const
    { return qvariant_cast< bool >(property("lockScreenAtAwake")); }
    inline void setLockScreenAtAwake(bool value)
    { setProperty("lockScreenAtAwake", QVariant::fromValue(value)); }

    Q_PROPERTY(int lockScreenDelay READ lockScreenDelay WRITE setLockScreenDelay)
    inline int lockScreenDelay() const
    { return qvariant_cast< int >(property("lockScreenDelay")); }
    inline void setLockScreenDelay(int value)
    { setProperty("lockScreenDelay", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QStringList> ConfigurableItems()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ConfigurableItems"), argumentList);
    }

    inline QDBusPendingReply<QString> GetScreenSaverCover(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("GetScreenSaverCover"), argumentList);
    }

    inline QDBusPendingReply<bool> IsConfigurable(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("IsConfigurable"), argumentList);
    }

    inline QDBusPendingReply<bool> Preview(const QString &name, int staysOn)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(staysOn);
        return asyncCallWithArgumentList(QStringLiteral("Preview"), argumentList);
    }

    inline QDBusPendingReply<> RefreshScreenSaverList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RefreshScreenSaverList"), argumentList);
    }

    inline QDBusPendingReply<> Start()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Start"), argumentList);
    }

    inline QDBusPendingReply<bool> StartCustomConfig(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("StartCustomConfig"), argumentList);
    }

    inline QDBusPendingReply<> Stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    typedef ::ComDeepinScreenSaverInterface ScreenSaver;
  }
}
#endif
